@startuml
'https://plantuml.com/class-diagram

' ========================== GENERAL =========================

class upload_wizard {
    +{static} void upload_problem(verbose, path_to_problems_dir, wizard_version_running)

    -{static} int generate_problem_id()
    -{static} void create_problem_dir(problem_id, path_to_problems_dir)
    -{static} void upload_statement()
}

note left of upload_wizard
The hierarchy of wizards is **ideologically** a hierarchy of classes

But these classes do not require instances

The Pythonic way to implement such a hierarchy is encapsulating wizards'
logic in modules (separate .py files)
To manage imports easily, we will organize them as packages
Note, that not every class will get its own module
E.g. incomplete wizards, marked as abstract classes,
will inhabit the protocol_upload package,
as they should not be visible outside of this hierarchy
end note

class problem_data_upload {
    +{static} void upload_problem_data(verbose, path_to_problems_dir)
}
upload_wizard "1" <--- "1" problem_data_upload

' ========================== PROTOCOLS =========================

class protocol_upload {
    +{static} void upload_protocol(protocol_number, custodian, verbose)
    -{static} void choose_protocol_scheme(key_seq_to_current_dict, custodian)
    -{static} void upload_execution_and_conversion_data(key_seq_to_current_dict, custodian)
    -{static} void upload_programming_language_data(key_seq_to_current_dict, custodian)
    -{static} void upload_opts(key_seq_to_current_dict, custodian, verbose)
}
problem_data_upload "1" <--- "4" protocol_upload : one for each protocol

' ========================== INCOMPLETE WIZARDS =========================

abstract class infiles {
    #{static} void upload_inputs(key_seq_to_current_dict, custodian, verbose, test_count)
}

abstract class outfiles {
    #{static} void upload_random_input_generator(key_seq_to_current_dict, custodian, verbose, test_count)
}

abstract class custom_checker {
    #{static} void upload_custom_checker(key_seq_to_current_dict, custodian, verbose)
}

abstract class rand_in {
    #{static} void upload_random_input_generator(key_seq_to_current_dict, custodian, verbose, test_count)
}


' ========================== COMPLETE WIZARDS =========================

interface specific_protocol_upload {
    +{abstract} void upload_specific_protocol(...)
}
protocol_upload <-- specific_protocol_upload

class inout
infiles <-- inout
outfiles <-- inout
specific_protocol_upload <|... inout

class in_custom
infiles <-- in_custom
custom_checker <-- in_custom
specific_protocol_upload <|... in_custom

class rand_custom
rand_in <-- rand_custom
custom_checker <-- rand_custom
specific_protocol_upload <|... rand_custom

class limited_work_space {
    -{static} void upload_header(key_seq_to_current_dict, custodian, verbose)
    -{static} void upload_footer(key_seq_to_current_dict, custodian, verbose)
}
specific_protocol_upload <|... limited_work_space

@enduml