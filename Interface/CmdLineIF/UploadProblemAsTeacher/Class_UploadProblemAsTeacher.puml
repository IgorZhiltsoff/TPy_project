@startuml
'https://plantuml.com/class-diagram

' ========================== GENERAL =========================

class upload_wizard {
    +void upload_problem()

    -void upload_statement(data_custodian, verbose)
    -void assemble_problem_data(data_custodian, verbose)
}

note left of upload_wizard
The hierarchy of wizards is **ideologically** a hierarchy of classes

But these classes do not require instances

The Pythonic way to implement such a hierarchy is encapsulating wizards'
logic in modules (separate .py files)
To manage imports easily, we will organize them as packages
Note, that not every class will get its own module
E.g. incomplete wizards will inhabit the protocol_upload package,
as they should not be visible outside of this hierarchy
end note

class problem_data_upload {
    -void form_programming_language_data(data_custodian, verbose)
    -void choose_and_run_protocol_assembler(data_custodian, verbose)
}
upload_wizard "1" <--- "1" problem_data_upload

' ========================== PROTOCOLS =========================

abstract class protocol_upload {
    +{abstract} void upload(data_custodian, verbose)
}
problem_data_upload "1" <--- "4" protocol_upload : one for each protocol

' ========================== INCOMPLETE WIZARDS =========================

abstract class infiles {
    #void upload_inputs(data_custodian, verbose)
}

abstract class outfiles {
    #void upload_random_input_generator(data_custodian, verbose)
}

abstract class custom_checker {
    #{static} void upload_custom_checker(data_custodian, verbose)
}

abstract class rand_in {
    #{static} void upload_random_input_generator(data_custodian, verbose)
}

protocol_upload <|-- infiles
protocol_upload <|-- outfiles
protocol_upload <|-- custom_checker
protocol_upload <|-- rand_in

' ========================== COMPLETE WIZARDS =========================


class inout
infiles <|-- inout
outfiles <|-- inout

class in_custom
infiles <|-- in_custom
custom_checker <|-- in_custom

class rand_custom
rand_in <|-- rand_custom
custom_checker <|-- rand_custom

class limited_work_space {
    -{static} void upload_header(data_custodian, verbose)
    -{static} void upload_footer(data_custodian, verbose)
}
protocol_upload <|--- limited_work_space

@enduml